# this one is important
SET(CMAKE_SYSTEM_NAME micromachine)
#this one not so much
SET(CMAKE_SYSTEM_VERSION 1)

set(TARGET_PREFIX "arm-none-eabi-")


# specify the cross compiler
SET(CMAKE_C_COMPILER   "${TARGET_PREFIX}gcc")
SET(CMAKE_CXX_COMPILER "${TARGET_PREFIX}g++")
set(CMAKE_LINKER "${TARGET_PREFIX}ld")
set(CMAKE_CXX_LINKER "${TARGET_PREFIX}ld")
set(CMAKE_ASM_COMPILER "${TARGET_PREFIX}as")


UNSET(CMAKE_C_FLAGS CACHE)
UNSET(CMAKE_CXX_FLAGS CACHE)


# Global compiler options notes
#  * fshort-wchar : Ensures output ABI is compatible with newlib-nano specs
#  * -ggdb -g : To generate debug information
#
set(COMMON_CFLAGS "\
    -mcpu=cortex-m0 -mthumb -mfloat-abi=soft -march=armv6s-m \
    -ggdb -g \
    -specs=nano.specs \
    -fshort-wchar \
")

set(CMAKE_C_FLAGS "${COMMON_CFLAGS} -std=c11")
# note that to avoid undefined reference to `__cxa_guard_acquire' the threadsafe static initialization of c++11 is
# disabled
# note that to avoid undefined reference to  `__dso_handle and `__aeabi_atexit the option -fno-use-cxa-atexit is added
set(CMAKE_CXX_FLAGS "${COMMON_CFLAGS}  -std=c++11 -fno-use-cxa-atexit -fno-threadsafe-statics -fno-exceptions -march=armv6s-m")

set(CUSTOM_LD_FLAGS "-nostartfiles")

set(CMAKE_C_LINK_FLAGS "${CUSTOM_LD_FLAGS}")
set(CMAKE_CXX_LINK_FLAGS "${CUSTOM_LD_FLAGS}")

# where is the target environment
SET(CMAKE_FIND_ROOT_PATH ${CMAKE_SOURCE_DIR})

# search for programs in the build host directories
SET(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)


# for libraries and headers in the target directories
SET(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
SET(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)
