//
// Created by fla on 17-5-8.
//

#include "execution/alu.hpp"
#include <gtest/gtest.h>

template<typename u_type>
static void test_lsl(const u_type initial, const u_type expected_result, const size_t offset,
					 bool expected_carry)
{
	u_type value = initial;
	bool carry = alu::lsl(value, offset);
	EXPECT_EQ(expected_result, value);
	EXPECT_EQ(expected_carry, carry);
}

template<typename u_type>
static void test_lsr(const u_type initial, const u_type expected_result, const size_t offset,
					 bool expected_carry)
{
	u_type value = initial;
	bool carry = alu::lsr(value, offset);
	EXPECT_EQ(expected_result, value);
	EXPECT_EQ(expected_carry, carry);
}

TEST(AluTests, LSLCarry32)
{
	test_lsl<uint32_t>(0b01011010111101100110001000001001, 0b01100110001000001001000000000000, 12,
					   0);
	test_lsl<uint32_t>(0b00101101111100101011000100000101, 0b00101000000000000000000000000000, 27,
					   1);
	test_lsl<uint32_t>(0b00001001011101010010000010001001, 0b00100010010000000000000000000000, 22,
					   1);
	test_lsl<uint32_t>(0b01110010101000100011101001010010, 0b00100000000000000000000000000000, 28,
					   1);
	test_lsl<uint32_t>(0b01111001000001111001010010001101, 0b10010100100011010000000000000000, 16,
					   1);
	test_lsl<uint32_t>(0b01010110001001011010000111110010, 0b10010000000000000000000000000000, 27,
					   0);
	test_lsl<uint32_t>(0b01100100010010111100011011010100, 0b01001011110001101101010000000000, 8,
					   0);
	test_lsl<uint32_t>(0b00111000110110010111001001110010, 0b00110110010111001001110010000000, 6,
					   1);
	test_lsl<uint32_t>(0b00111101111111101110000111010111, 0b01110000111010111000000000000000, 15,
					   1);
	test_lsl<uint32_t>(0b01000011101100110010111010100011, 0b00011101100110010111010100011000, 3,
					   0);
	test_lsl<uint32_t>(0b00100010010100101010010010010111, 0b00101010010010010111000000000000, 12,
					   0);
	test_lsl<uint32_t>(0b00000101100100110111101111011000, 0b11101100000000000000000000000000, 23,
					   1);
	test_lsl<uint32_t>(0b00100111100111100011101000011011, 0b10110000000000000000000000000000, 28,
					   0);
	test_lsl<uint32_t>(0b00101011011000010000000111110100, 0b11111010000000000000000000000000, 23,
					   0);
	test_lsl<uint32_t>(0b00101101111100011110010001101001, 0b01111100011110010001101001000000, 6,
					   1);
	test_lsl<uint32_t>(0b01011100011010100110110010100011, 0b10011011001010001100000000000000, 14,
					   1);
	test_lsl<uint32_t>(0b01010110001110101010111110011001, 0b11001000000000000000000000000000, 27,
					   0);
	test_lsl<uint32_t>(0b01100011000101100110001101101011, 0b00110001011001100011011010110000, 4,
					   0);
	test_lsl<uint32_t>(0b00110011111100001100001001100000, 0b00111111000011000010011000000000, 4,
					   0);
	test_lsl<uint32_t>(0b00001100000111101111000000101101, 0b11011110000001011010000000000000, 13,
					   1);
	test_lsl<uint32_t>(0b00001101101001000001001010100010, 0b10010101000100000000000000000000, 19,
					   0);
	test_lsl<uint32_t>(0b00000000011000001110000001110100, 0b00011101000000000000000000000000, 22,
					   1);
	test_lsl<uint32_t>(0b01100110110110001011000110001110, 0b10001100011100000000000000000000, 19,
					   1);
	test_lsl<uint32_t>(0b00010000111000101000101010101011, 0b01010110000000000000000000000000, 25,
					   0);
	test_lsl<uint32_t>(0b01000010100011000011101001010110, 0b01001010110000000000000000000000, 21,
					   0);
	test_lsl<uint32_t>(0b01011001000100000110101000110100, 0b00010000011010100011010000000000, 8,
					   0);
	test_lsl<uint32_t>(0b01101100110101111000000100100000, 0b00000000000000000000000000000000, 28,
					   0);
	test_lsl<uint32_t>(0b01100011101001110101110101010111, 0b01011100000000000000000000000000, 26,
					   0);
	test_lsl<uint32_t>(0b00000010110010001101011010100100, 0b00010110010001101011010100100000, 3,
					   0);
	test_lsl<uint32_t>(0b01110101001110011100000011001101, 0b10011100111000000110011010000000, 7,
					   1);
	test_lsl<uint32_t>(0b01100110110111001111111011000010, 0b11111110110000100000000000000000, 16,
					   0);
	test_lsl<uint32_t>(0b00111001101000110000000110000000, 0b00110000000000000000000000000000, 21,
					   1);
	test_lsl<uint32_t>(0b01011100000000010100101100011010, 0b01101000000000000000000000000000, 26,
					   1);
	test_lsl<uint32_t>(0b00011100110001110111111001111101, 0b11110100000000000000000000000000, 26,
					   1);
	test_lsl<uint32_t>(0b01110010011100100000001010101010, 0b01010101010000000000000000000000, 21,
					   1);
	test_lsl<uint32_t>(0b00111100111010100110010001101000, 0b10100110010001101000000000000000, 12,
					   0);
	test_lsl<uint32_t>(0b00001011001010110000000011001010, 0b10101100000000110010100000000000, 10,
					   0);
	test_lsl<uint32_t>(0b01110010000001011110111011000011, 0b11100100000010111101110110000110, 1,
					   1);
	test_lsl<uint32_t>(0b01110110100001011001011111000100, 0b00010000000000000000000000000000, 26,
					   1);
	test_lsl<uint32_t>(0b00010110110110110100010110111101, 0b11110100000000000000000000000000, 26,
					   1);
	test_lsl<uint32_t>(0b01010111011111100011001010111101, 0b11001010111101000000000000000000, 18,
					   1);
	test_lsl<uint32_t>(0b00011101111100001011000100000111, 0b00101100010000011100000000000000, 14,
					   0);
	test_lsl<uint32_t>(0b01001110100011111001010111111111, 0b11000000000000000000000000000000, 30,
					   1);
	test_lsl<uint32_t>(0b01011000110010110110111100011010, 0b10110001100101101101111000110100, 1,
					   1);
	test_lsl<uint32_t>(0b00010000101000000110110110101010, 0b11011010101000000000000000000000, 20,
					   0);
	test_lsl<uint32_t>(0b00000010000100110010011110110001, 0b10000100110010011110110001000000, 6,
					   0);
	test_lsl<uint32_t>(0b00011111101010010101110101011000, 0b11000000000000000000000000000000, 27,
					   1);
	test_lsl<uint32_t>(0b00110100100101010001101011000111, 0b10100011010110001110000000000000, 13,
					   0);
	test_lsl<uint32_t>(0b01011000011011111000111000011110, 0b10001110000111100000000000000000, 16,
					   1);
	test_lsl<uint32_t>(0b00001011100111001011010111101101, 0b00101101011110110100000000000000, 14,
					   0);
}

TEST(AluTests, LSLCarry16)
{
	test_lsl<uint16_t>(0b0000101111110100, 0b0001011111101000, 1, 0);
	test_lsl<uint16_t>(0b0111011010100111, 0b0100111000000000, 9, 1);
	test_lsl<uint16_t>(0b1010011100111010, 0b1101000000000000, 11, 0);
	test_lsl<uint16_t>(0b1100010111011101, 0b1110111010000000, 7, 1);
	test_lsl<uint16_t>(0b0110111000001101, 0b1000000000000000, 15, 0);
	test_lsl<uint16_t>(0b1111110101001111, 0b1100000000000000, 14, 1);
	test_lsl<uint16_t>(0b0101001000010001, 0b0001000000000000, 12, 1);
	test_lsl<uint16_t>(0b1100011110001010, 0b0001111000101000, 2, 0);
	test_lsl<uint16_t>(0b0001110010011000, 0b1001100000000000, 8, 0);
	test_lsl<uint16_t>(0b1110100101111100, 0b1111000000000000, 10, 0);
	test_lsl<uint16_t>(0b1110011101000101, 0b0100010100000000, 8, 1);
	test_lsl<uint16_t>(0b0010100101001100, 0b0100110000000000, 8, 1);
	test_lsl<uint16_t>(0b0010110110011011, 0b0101101100110110, 1, 1);
	test_lsl<uint16_t>(0b0110000101011001, 0b1011001000000000, 9, 0);
	test_lsl<uint16_t>(0b1001101101100000, 0b1100000000000000, 9, 1);
	test_lsl<uint16_t>(0b1000000111101010, 0b1101010000000000, 9, 0);
	test_lsl<uint16_t>(0b1001111011100000, 0b1110111000000000, 4, 0);
	test_lsl<uint16_t>(0b1001010101001011, 0b0101010010110000, 4, 0);
	test_lsl<uint16_t>(0b1010011111011111, 0b0111110000000000, 10, 1);
	test_lsl<uint16_t>(0b0101100011111111, 0b1111100000000000, 11, 1);
	test_lsl<uint16_t>(0b0011100010110111, 0b1000000000000000, 15, 0);
	test_lsl<uint16_t>(0b1000101010100101, 0b0100101000000000, 9, 1);
	test_lsl<uint16_t>(0b0001101000111001, 0b1000111001000000, 6, 0);
	test_lsl<uint16_t>(0b1101111101110110, 0b1111101110110000, 3, 0);
	test_lsl<uint16_t>(0b0000010001011010, 0b0000000000000000, 15, 0);
	test_lsl<uint16_t>(0b1011100101001010, 0b0100101000000000, 8, 1);
	test_lsl<uint16_t>(0b0000001111011000, 0b0000011110110000, 1, 0);
	test_lsl<uint16_t>(0b0010010011000011, 0b1001001100001100, 2, 0);
	test_lsl<uint16_t>(0b0111111110011010, 0b0110100000000000, 10, 1);
	test_lsl<uint16_t>(0b0100010001011011, 0b1000000000000000, 15, 0);
	test_lsl<uint16_t>(0b0000101010010011, 0b1010010011000000, 6, 0);
	test_lsl<uint16_t>(0b1100001001001111, 0b0010010011110000, 4, 0);
	test_lsl<uint16_t>(0b1011111011010111, 0b1111101101011100, 2, 1);
	test_lsl<uint16_t>(0b1110111110001110, 0b1100011100000000, 7, 1);
	test_lsl<uint16_t>(0b1011001011000011, 0b0110000110000000, 7, 1);
	test_lsl<uint16_t>(0b0111110010100010, 0b1001010001000000, 5, 1);
	test_lsl<uint16_t>(0b1001111011011011, 0b1111011011011000, 3, 1);
	test_lsl<uint16_t>(0b0111011001000011, 0b1000011000000000, 9, 1);
	test_lsl<uint16_t>(0b0101100101110111, 0b0111011100000000, 8, 1);
	test_lsl<uint16_t>(0b1110111111100101, 0b1010000000000000, 13, 1);
	test_lsl<uint16_t>(0b0001111010101100, 0b0101011000000000, 7, 1);
	test_lsl<uint16_t>(0b0100100101110001, 0b0101110001000000, 6, 1);
	test_lsl<uint16_t>(0b1000101111000111, 0b1011110001110000, 4, 0);
	test_lsl<uint16_t>(0b0101001111111000, 0b1111110000000000, 7, 1);
	test_lsl<uint16_t>(0b1111010001010000, 0b0101000000000000, 8, 0);
	test_lsl<uint16_t>(0b0010011001011011, 0b0100110010110110, 1, 1);
	test_lsl<uint16_t>(0b0101111010011000, 0b1010011000000000, 6, 0);
	test_lsl<uint16_t>(0b1010100001010111, 0b1100000000000000, 14, 0);
	test_lsl<uint16_t>(0b0100000001000101, 0b0000000100010100, 2, 1);
	test_lsl<uint16_t>(0b1000010000100110, 0b0001000010011000, 2, 1);
}


TEST(AluTests, LSLCarry8)
{
	test_lsl<uint8_t>(0b10000100, 0b00010000, 2, 1);
	test_lsl<uint8_t>(0b10011011, 0b11011000, 3, 1);
	test_lsl<uint8_t>(0b11011001, 0b01100100, 2, 0);
	test_lsl<uint8_t>(0b01100010, 0b00010000, 3, 0);
	test_lsl<uint8_t>(0b11001011, 0b10010110, 1, 1);
	test_lsl<uint8_t>(0b01001101, 0b10100000, 5, 0);
	test_lsl<uint8_t>(0b01111000, 0b10000000, 4, 1);
	test_lsl<uint8_t>(0b10111000, 0b11100000, 2, 0);
	test_lsl<uint8_t>(0b00111101, 0b01111010, 1, 0);
	test_lsl<uint8_t>(0b11010101, 0b01010100, 2, 1);
	test_lsl<uint8_t>(0b01100000, 0b11000000, 1, 0);
	test_lsl<uint8_t>(0b00110001, 0b11000100, 2, 0);
	test_lsl<uint8_t>(0b10101010, 0b10100000, 4, 0);
	test_lsl<uint8_t>(0b11000101, 0b00010100, 2, 1);
	test_lsl<uint8_t>(0b01001000, 0b00100000, 2, 0);
	test_lsl<uint8_t>(0b00010111, 0b01011100, 2, 1);
	test_lsl<uint8_t>(0b10101011, 0b10101100, 2, 0);
	test_lsl<uint8_t>(0b11011010, 0b10110100, 1, 1);
	test_lsl<uint8_t>(0b00111110, 0b01111100, 1, 1);
	test_lsl<uint8_t>(0b01010101, 0b10101010, 1, 0);
	test_lsl<uint8_t>(0b01100010, 0b10000000, 6, 1);
	test_lsl<uint8_t>(0b01010001, 0b10000000, 7, 0);
	test_lsl<uint8_t>(0b10010000, 0b00000000, 7, 1);
	test_lsl<uint8_t>(0b10100010, 0b10000000, 6, 0);
	test_lsl<uint8_t>(0b01000010, 0b01000000, 5, 0);
	test_lsl<uint8_t>(0b10111001, 0b11100100, 2, 0);
	test_lsl<uint8_t>(0b11010100, 0b00000000, 7, 1);
	test_lsl<uint8_t>(0b11101000, 0b10100000, 2, 0);
	test_lsl<uint8_t>(0b11010101, 0b10000000, 7, 1);
	test_lsl<uint8_t>(0b00011101, 0b00111010, 1, 0);
	test_lsl<uint8_t>(0b11011011, 0b11000000, 6, 1);
	test_lsl<uint8_t>(0b11101001, 0b10000000, 7, 1);
	test_lsl<uint8_t>(0b11101000, 0b00000000, 7, 1);
	test_lsl<uint8_t>(0b00001011, 0b10000000, 7, 0);
	test_lsl<uint8_t>(0b00000000, 0b00000000, 5, 0);
	test_lsl<uint8_t>(0b00101111, 0b11100000, 5, 1);
	test_lsl<uint8_t>(0b00000010, 0b00010000, 3, 0);
	test_lsl<uint8_t>(0b00111101, 0b01111010, 1, 0);
	test_lsl<uint8_t>(0b10001001, 0b10000000, 7, 1);
	test_lsl<uint8_t>(0b01100000, 0b00000000, 5, 1);
	test_lsl<uint8_t>(0b01011000, 0b00000000, 6, 1);
	test_lsl<uint8_t>(0b01101101, 0b11011010, 1, 0);
	test_lsl<uint8_t>(0b00000011, 0b00110000, 4, 0);
	test_lsl<uint8_t>(0b10101011, 0b10110000, 4, 0);
	test_lsl<uint8_t>(0b00000100, 0b10000000, 5, 0);
	test_lsl<uint8_t>(0b11110101, 0b11010100, 2, 1);
	test_lsl<uint8_t>(0b11111110, 0b10000000, 6, 1);
	test_lsl<uint8_t>(0b01100110, 0b10011000, 2, 1);
	test_lsl<uint8_t>(0b10100001, 0b00100000, 5, 1);
	test_lsl<uint8_t>(0b00001100, 0b11000000, 4, 0);
}

TEST(AluTests, LSLcarryOne)
{
	uint32_t value = 0b10010101100010101001010011110101;
	bool carry = alu::lsl(value, 12);
	EXPECT_EQ(0b10010101100010101001010011110101 << 12, value);
	EXPECT_EQ(true, carry);
}

TEST(AluTests, LSLcarryTwo)
{
	uint32_t value = 0b10010101100010101001010011110101;
	bool carry = alu::lsl(value, 9);
	EXPECT_EQ(0b10010101100010101001010011110101 << 9, value);
	EXPECT_EQ(false, carry);
}


TEST(AluTests, LSRCarry32)
{
	test_lsr<uint32_t>(0b01001000010010000111011001101011, 0b00000010010000100100001110110011, 5,
					   0);
	test_lsr<uint32_t>(0b00100011000110011101111000110100, 0b00001000110001100111011110001101, 2,
					   1);
	test_lsr<uint32_t>(0b00000010000111010011000101101101, 0b00000000000000000000010000111010, 15,
					   1);
	test_lsr<uint32_t>(0b00101011000101111010101100000111, 0b00000000000000000000101011000101, 18,
					   1);
	test_lsr<uint32_t>(0b00001111100000011010110000100011, 0b00000111110000001101011000010001, 1,
					   0);
	test_lsr<uint32_t>(0b00000000101000011011000110100001, 0b00000000000000000000000000000000, 29,
					   0);
	test_lsr<uint32_t>(0b01010010011010100111111101000010, 0b00000000000000000000000000001010, 27,
					   0);
	test_lsr<uint32_t>(0b00001100101111101000001100110001, 0b00000000000000000000000000000000, 31,
					   1);
	test_lsr<uint32_t>(0b01000000101011011010000111110011, 0b00000000000000010000001010110110, 14,
					   0);
	test_lsr<uint32_t>(0b00101011001110000011100101101101, 0b00000000000000000000000001010110, 23,
					   1);
	test_lsr<uint32_t>(0b01101111101110101101011101100000, 0b00000000011011111011101011010111, 8,
					   1);
	test_lsr<uint32_t>(0b00010111001000110101110010100011, 0b00000101110010001101011100101000, 2,
					   0);
	test_lsr<uint32_t>(0b00100001111001010001111010100010, 0b00010000111100101000111101010001, 1,
					   0);
	test_lsr<uint32_t>(0b00100010001100010000101010011111, 0b00000000000001000100011000100001, 11,
					   1);
	test_lsr<uint32_t>(0b00101001110101000010000101100001, 0b00000000000000000000000000000101, 27,
					   0);
	test_lsr<uint32_t>(0b00101001010110000110100001100100, 0b00000000000001010010101100001101, 11,
					   1);
	test_lsr<uint32_t>(0b01010000000010001110011010100010, 0b00000000101000000001000111001101, 7,
					   0);
	test_lsr<uint32_t>(0b00100111000010100010100011001010, 0b00000000000000000000100111000010, 18,
					   1);
	test_lsr<uint32_t>(0b00010110101010001111011110111101, 0b00000000000000000010110101010001, 15,
					   0);
	test_lsr<uint32_t>(0b00001101010011001101101111100001, 0b00000000000000000000000001101010, 21,
					   0);
	test_lsr<uint32_t>(0b01101111110100010110100111101110, 0b00000000000000000000001101111110, 21,
					   0);
	test_lsr<uint32_t>(0b01000000100101001010011000000010, 0b00000000000000000000001000000100, 21,
					   1);
	test_lsr<uint32_t>(0b00100111001111011110100101001100, 0b00000000000000000000100111001111, 18,
					   1);
	test_lsr<uint32_t>(0b00101110101110011111101111100111, 0b00000000000000101110101110011111, 12,
					   1);
	test_lsr<uint32_t>(0b00111111010101000001110100110001, 0b00000000001111110101010000011101, 8,
					   0);
	test_lsr<uint32_t>(0b01010001101000110111001000010101, 0b00000000000000000000000000000001, 30,
					   0);
	test_lsr<uint32_t>(0b01001110111011101010101101100010, 0b00000000000000000000000000001001, 27,
					   0);
	test_lsr<uint32_t>(0b01001111100010010011010010010101, 0b00000000000000000001001111100010, 18,
					   1);
	test_lsr<uint32_t>(0b00110010110011101000010100001100, 0b00000000000000000000000001100101, 23,
					   1);
	test_lsr<uint32_t>(0b00100110000100100000000010110001, 0b00000000000100110000100100000000, 9,
					   0);
	test_lsr<uint32_t>(0b00110100000001100100110001110011, 0b00000000000001101000000011001001, 11,
					   0);
	test_lsr<uint32_t>(0b01001110101111110011111000111010, 0b00000000000000100111010111111001, 13,
					   1);
	test_lsr<uint32_t>(0b00011011110111001010111110101101, 0b00000000000000000000000000000001, 28,
					   1);
	test_lsr<uint32_t>(0b01010110001101010100101100100100, 0b00001010110001101010100101100100, 3,
					   1);
	test_lsr<uint32_t>(0b01000111111010110011101011010110, 0b00000000000000000000000000000010, 29,
					   1);
	test_lsr<uint32_t>(0b01011000101100000100101101001011, 0b00000000000000000000000001011000, 24,
					   0);
	test_lsr<uint32_t>(0b01110001011100001011010010001000, 0b00000001110001011100001011010010, 6,
					   0);
	test_lsr<uint32_t>(0b01111001111110001000110111110101, 0b00111100111111000100011011111010, 1,
					   1);
	test_lsr<uint32_t>(0b01100110100110000001101010000010, 0b00000000000000000000000000000000, 31,
					   0);
	test_lsr<uint32_t>(0b00000000100110100010100100010100, 0b00000000000000000000000000010011, 19,
					   0);
	test_lsr<uint32_t>(0b00000010101001001011111100110001, 0b00000000000000001010100100101111, 10,
					   1);
	test_lsr<uint32_t>(0b01010100111110110010110001000101, 0b00000000000000000000101010011111, 19,
					   0);
	test_lsr<uint32_t>(0b00111011000001000110100111100001, 0b00000000000000011101100000100011, 13,
					   1);
	test_lsr<uint32_t>(0b01000010011001110011010010011000, 0b00000000000000000000000000000010, 29,
					   0);
	test_lsr<uint32_t>(0b00010110001111101010000000001111, 0b00000000000000000000000000000000, 29,
					   1);
	test_lsr<uint32_t>(0b01001010011101011001010101011100, 0b00000000000000000010010100111010, 17,
					   0);
	test_lsr<uint32_t>(0b00110111111000111001111001011110, 0b00000000000000000000000011011111, 22,
					   1);
	test_lsr<uint32_t>(0b01001110010101000001111110010111, 0b00000000000000000001001110010101, 18,
					   0);
	test_lsr<uint32_t>(0b00001110111111100011101010011011, 0b00000000000000000000000000011101, 23,
					   0);
	test_lsr<uint32_t>(0b00000110010001011111010101110110, 0b00000000000000000000000000000001, 26,
					   1);
}


TEST(AluTests, LSRCarry16)
{
	test_lsr<uint16_t>(0b0101010110100100, 0b0000000001010101, 8, 1);
	test_lsr<uint16_t>(0b0110110100010010, 0b0000001101101000, 5, 1);
	test_lsr<uint16_t>(0b0000111011011011, 0b0000000001110110, 5, 1);
	test_lsr<uint16_t>(0b1110111001110110, 0b0000011101110011, 5, 1);
	test_lsr<uint16_t>(0b0011100110000010, 0b0000000000001110, 10, 0);
	test_lsr<uint16_t>(0b0000001000100110, 0b0000000000000000, 11, 0);
	test_lsr<uint16_t>(0b1000001101100010, 0b0000000100000110, 7, 1);
	test_lsr<uint16_t>(0b1011100110001110, 0b0000010111001100, 5, 0);
	test_lsr<uint16_t>(0b1101010001000011, 0b0000000000000001, 15, 1);
	test_lsr<uint16_t>(0b1101011110001000, 0b0000000110101111, 7, 1);
	test_lsr<uint16_t>(0b1001100000111001, 0b0100110000011100, 1, 0);
	test_lsr<uint16_t>(0b0111011100000010, 0b0001110111000000, 2, 1);
	test_lsr<uint16_t>(0b1100101010101101, 0b0000110010101010, 4, 1);
	test_lsr<uint16_t>(0b0011111000001010, 0b0000000111110000, 5, 1);
	test_lsr<uint16_t>(0b1011001010011110, 0b0000000000001011, 12, 1);
	test_lsr<uint16_t>(0b0001111000000011, 0b0000000000111100, 7, 0);
	test_lsr<uint16_t>(0b0100011011000111, 0b0000010001101100, 4, 0);
	test_lsr<uint16_t>(0b1110101001101111, 0b0011101010011011, 2, 1);
	test_lsr<uint16_t>(0b0111101111100101, 0b0011110111110010, 1, 1);
	test_lsr<uint16_t>(0b0100110110110100, 0b0000010011011011, 4, 1);
	test_lsr<uint16_t>(0b0101101101110111, 0b0000000000000001, 14, 1);
	test_lsr<uint16_t>(0b0011101111010000, 0b0000000000000011, 12, 0);
	test_lsr<uint16_t>(0b1111000010100111, 0b0000000111100001, 7, 0);
	test_lsr<uint16_t>(0b1010000010000111, 0b0010100000100001, 2, 1);
	test_lsr<uint16_t>(0b1011100000110100, 0b0000000000010111, 11, 1);
	test_lsr<uint16_t>(0b0010010010001111, 0b0000000000000001, 13, 1);
	test_lsr<uint16_t>(0b0000100010101100, 0b0000000000001000, 8, 1);
	test_lsr<uint16_t>(0b1100111111001111, 0b0011001111110011, 2, 0);
	test_lsr<uint16_t>(0b1000100001001110, 0b0000001000100001, 6, 0);
	test_lsr<uint16_t>(0b1001001101011010, 0b0000000000000001, 15, 0);
	test_lsr<uint16_t>(0b0111000001110101, 0b0001110000011101, 2, 1);
	test_lsr<uint16_t>(0b0100001100101111, 0b0000000000000100, 12, 1);
	test_lsr<uint16_t>(0b0011110001110010, 0b0000111100011100, 2, 1);
	test_lsr<uint16_t>(0b0000110011011111, 0b0000000000000000, 12, 1);
	test_lsr<uint16_t>(0b0000011010000100, 0b0000000110100001, 2, 0);
	test_lsr<uint16_t>(0b0110110110111110, 0b0000000000001101, 11, 1);
	test_lsr<uint16_t>(0b1010101001101110, 0b0000000000000010, 14, 1);
	test_lsr<uint16_t>(0b0100000011010101, 0b0000100000011010, 3, 0);
	test_lsr<uint16_t>(0b1001111011101101, 0b0000000010011110, 8, 1);
	test_lsr<uint16_t>(0b0101111111111111, 0b0000101111111111, 3, 1);
	test_lsr<uint16_t>(0b0101100101101100, 0b0000001011001011, 5, 0);
	test_lsr<uint16_t>(0b1010011110001110, 0b0000010100111100, 5, 1);
	test_lsr<uint16_t>(0b0010000000011111, 0b0000000000000001, 13, 1);
	test_lsr<uint16_t>(0b0011010101110010, 0b0000000000110101, 8, 0);
	test_lsr<uint16_t>(0b1000010100110111, 0b0000100001010011, 4, 0);
	test_lsr<uint16_t>(0b1110001101011011, 0b0000011100011010, 5, 0);
	test_lsr<uint16_t>(0b0111101000101010, 0b0000001111010001, 5, 0);
	test_lsr<uint16_t>(0b1010110011101010, 0b0000000010101100, 8, 1);
	test_lsr<uint16_t>(0b0101010000101001, 0b0000000000000010, 13, 0);
	test_lsr<uint16_t>(0b0110111011110100, 0b0000000110111011, 6, 1);
}

TEST(AluTests, LSRCarry8)
{
	test_lsr<uint8_t>(0b00010011, 0b00000000, 6, 1);
	test_lsr<uint8_t>(0b01011001, 0b00000010, 5, 0);
	test_lsr<uint8_t>(0b10001100, 0b00000100, 5, 1);
	test_lsr<uint8_t>(0b10000100, 0b00000001, 7, 0);
	test_lsr<uint8_t>(0b10101101, 0b00000010, 6, 0);
	test_lsr<uint8_t>(0b10001101, 0b00000100, 5, 1);
	test_lsr<uint8_t>(0b01111001, 0b00000000, 7, 1);
	test_lsr<uint8_t>(0b11001101, 0b00000110, 5, 1);
	test_lsr<uint8_t>(0b01110101, 0b00000001, 6, 0);
	test_lsr<uint8_t>(0b01000100, 0b00000001, 6, 0);
	test_lsr<uint8_t>(0b10010011, 0b00000010, 6, 1);
	test_lsr<uint8_t>(0b11111010, 0b00000011, 6, 1);
	test_lsr<uint8_t>(0b11000011, 0b01100001, 1, 1);
	test_lsr<uint8_t>(0b01011111, 0b00000000, 7, 1);
	test_lsr<uint8_t>(0b10110101, 0b00000001, 7, 1);
	test_lsr<uint8_t>(0b00110100, 0b00000011, 4, 0);
	test_lsr<uint8_t>(0b00011000, 0b00001100, 1, 0);
	test_lsr<uint8_t>(0b01100010, 0b00000110, 4, 0);
	test_lsr<uint8_t>(0b10100101, 0b01010010, 1, 0);
	test_lsr<uint8_t>(0b10010111, 0b00001001, 4, 0);
	test_lsr<uint8_t>(0b11000100, 0b00000001, 7, 0);
	test_lsr<uint8_t>(0b11000111, 0b00110001, 2, 0);
	test_lsr<uint8_t>(0b00010100, 0b00000010, 3, 1);
	test_lsr<uint8_t>(0b11011101, 0b00000011, 6, 0);
	test_lsr<uint8_t>(0b11101001, 0b00000111, 5, 0);
	test_lsr<uint8_t>(0b11100111, 0b00000001, 7, 1);
	test_lsr<uint8_t>(0b01101011, 0b00110101, 1, 1);
	test_lsr<uint8_t>(0b01100011, 0b00110001, 1, 1);
	test_lsr<uint8_t>(0b00110101, 0b00011010, 1, 0);
	test_lsr<uint8_t>(0b01000011, 0b00010000, 2, 0);
	test_lsr<uint8_t>(0b00110001, 0b00000110, 3, 1);
	test_lsr<uint8_t>(0b10110010, 0b00101100, 2, 1);
	test_lsr<uint8_t>(0b00000100, 0b00000000, 3, 0);
	test_lsr<uint8_t>(0b11101101, 0b00000111, 5, 1);
	test_lsr<uint8_t>(0b11111011, 0b00001111, 4, 1);
	test_lsr<uint8_t>(0b11111100, 0b00001111, 4, 1);
	test_lsr<uint8_t>(0b10101000, 0b01010100, 1, 0);
	test_lsr<uint8_t>(0b11111100, 0b00111111, 2, 1);
	test_lsr<uint8_t>(0b01011000, 0b00000101, 4, 1);
	test_lsr<uint8_t>(0b01000110, 0b00010001, 2, 0);
	test_lsr<uint8_t>(0b11111011, 0b00000011, 6, 1);
	test_lsr<uint8_t>(0b10111110, 0b00101111, 2, 1);
	test_lsr<uint8_t>(0b00010000, 0b00000000, 5, 0);
	test_lsr<uint8_t>(0b10010100, 0b00000100, 5, 1);
	test_lsr<uint8_t>(0b11100100, 0b00001110, 4, 0);
	test_lsr<uint8_t>(0b00110000, 0b00000000, 7, 0);
	test_lsr<uint8_t>(0b01001110, 0b00001001, 3, 0);
	test_lsr<uint8_t>(0b01011110, 0b00000000, 7, 0);
	test_lsr<uint8_t>(0b11110111, 0b01111011, 1, 1);
	test_lsr<uint8_t>(0b11111100, 0b00000111, 5, 1);
}

TEST(AluTests, ASRCarry32)
{
	uint32_t value = 0b10000000000000000000000010001001;
	bool carry = alu::asr(value, 3);
	EXPECT_EQ(0b11110000000000000000000000010001, value);
	EXPECT_EQ(false, carry);
}

TEST(AluTests, RORCarry32)
{
	uint32_t value = 0b10110010100111010100110010010101;
	bool carry = alu::ror(value, 3);
	EXPECT_EQ(0b10110110010100111010100110010010, value);
	EXPECT_EQ(true, carry);
}
